
/*
Given a square grid of size N, each cell of which contains integer cost which represents a cost to traverse through that cell, we need to find a path from top left cell to bottom right cell by which the total cost incurred is minimum.
From the cell (i,j) we can go (i,j-1), (i, j+1), (i-1, j), (i+1, j). 

Note: It is assumed that negative cost cycles do not exist in the input matrix.
*/

/*
approach:
     actually dfs+dp will not work here because dp will store the answers for every cell earlier but may be possible 
     that for a cell minimum answer would be something else but because of this condition 
     if(dp[i][j]!=-1) return dp[i][j];
     so this can be done without dp but will give TLE 
     so dijekstra algo will be suitable.
*/

    // for 4 directional dfs
vector<pair<int,int>> v={
    {1,0},{0,1},{-1,0},{0,-1}
};

// validate function
bool vd(int i,int j,int n,int m){
    return i>=0 && j>=0 && i<n && j<m;
}
// int dfs(int i,int j,int n,int m,vector<vector<int>>& grid,vector<vector<int>>& vis, vector<vector<int>>&dp){
//     if(i==n-1 && j==m-1) return grid[i][j];
//     if(dp[i][j]!=-1) return dp[i][j];
//     vis[i][j]=1;
//     int ans=INT_MAX;
//     for(auto it:v){
//         int x=i+it.first;
//         int y=j+it.second;
//         if(!vd(x,y,n,m)) continue;
//         if(vis[x][y]) continue;
//         int a=dfs(x,y,n,m,grid,vis,dp);
        
//         if(a!=INT_MAX) ans = min(ans,grid[i][j]+a);
//         // cout<<a<<endl;
//     }
//     vis[i][j]=0;
//     return dp[i][j]=ans;
// }
    int minimumCostPath(vector<vector<int>>& grid) 
    {
        // Code here
        
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<int>> dist(n,vector<int>(m,INT_MAX));
        dist[0][0]=grid[0][0];
        
        multiset<pair<int,pair<int,int>>> s;
        
        s.insert({grid[0][0],{0,0}});
        while(!s.empty()){
            auto it=s.begin();
            s.erase(s.begin());
            int w=it->first;
            int x=it->second.first;
            int y=it->second.second;
            for(auto&it:v){
                    int nx=x+it.first;
                    int ny=y+it.second;
                    if(!vd(nx,ny,n,m)) continue;
                    if(dist[nx][ny]>=dist[x][y]+grid[nx][ny]){
                        dist[nx][ny]=dist[x][y]+grid[nx][ny];
                        s.insert({dist[nx][ny],{nx,ny}});
                    }
            }
        }
         
        return dist[n-1][m-1];
    }